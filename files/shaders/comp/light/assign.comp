#include "lib/sets.glsl"
#include "lib/pushconstants.glsl"
#include "lib/view/scene.glsl"
#include "lib/view/fragpos.glsl"
#include "lib/light/pointlights.glsl"
#include "lib/light/equations.glsl"
#include "lib/light/grid.glsl"
#include "lib/light/maxlights.glsl"
#include "comp/bindings.glsl"

layout(local_size_x = 16, local_size_y = 8, local_size_z = 4) in;

layout (std430, set=VIEW_SET, binding=VIEW_LIGHT_INDICES_BINDING) buffer LightIndexBuffer{
    uint lightIndexList[];
};

layout (std430, set=VIEW_SET, binding=VIEW_LIGHT_GRID_BINDING) buffer LightGridBuffer{
    LightGrid lightGrid[];
};

layout (std430, set=COMPUTE_SET, binding=STORAGE_ARGS_BINDING) buffer indexCountBuffer{
    uint indexCount;
};

bool testLight(uint lightIndex, uvec3 gridCoord)
{
    PointLight l = pointLights[lightIndex];
    if (l.colorIntensity.w == 0)
        return false;
	vec3 vp = l.position.xyz;
    float range = lightRange(l.colorIntensity.w);
	vec3 vp_min, vp_max;
    vp_min.yz = vp.yz + range;
	vp_max.yz = vp.yz - range;

	// restrict view_z
	if ((vp_max.z >= -scene.zNear) || (vp_min.z <= -scene.zFar))
	    return false;

//float far = min(zFar, maxLightDistance);

	vp_min.z = min(-scene.zNear, vp_min.z);
	vp_max.z = max(-scene.zFar, vp_max.z);
	vp_min.x = vp.x - range;
	vp_max.x = vp.x + range;

	// frag pos
	vec2 fp_a = viewPosToFragPos(vec3(vp_min.xy, vp_min.z), pc.projection);
	vec2 fp_b = viewPosToFragPos(vec3(vp_min.xy, vp_max.z), pc.projection);
	vec2 fp_c = viewPosToFragPos(vec3(vp_max.xy, vp_max.z), pc.projection);
	vec2 fp_d = viewPosToFragPos(vec3(vp_max.xy, vp_min.z), pc.projection);
	vec2 fp_min = min(fp_a, fp_b);
	vec2 fp_max = max(fp_c, fp_d);

	// restrict frag_pos to the frustum
    //cull.comp(maxLights){
	bool exit = false;
	exit = exit || (fp_min.x < 0.f && fp_max.x < 0.f) || (fp_min.y < 0.f && fp_max.y < 0.f);
	exit = exit || (fp_min.x >= scene.resolution.x && fp_max.x >= scene.resolution.x) || (fp_min.y >= scene.resolution.y && fp_max.y >= scene.resolution.y);
	exit = exit || fp_min.x > fp_max.x || fp_min.y > fp_max.y;
	if (exit)
	    return false;
    //}

	fp_min.xy = max(vec2(0.f), fp_min);
	fp_max.xy = min(scene.resolution - 1.f, fp_max);

    vec2 tileSize = scene.resolution / vec2(gridSize.x, gridSize.y);
	vec3 grid_coord_min = viewPosToGridCoord(fp_min, vp_min.z, tileSize, scene.zNear, scene.zFar);
	vec3 grid_coord_max = viewPosToGridCoord(fp_max, vp_max.z, tileSize, scene.zNear, scene.zFar);

    return !((grid_coord_min.x < gridCoord.x && grid_coord_max.x < gridCoord.x) || (grid_coord_min.x > gridCoord.x+1 && grid_coord_max.x > gridCoord.x+1) || (grid_coord_min.y < gridCoord.y && grid_coord_max.y < gridCoord.y) || (grid_coord_min.y > gridCoord.y+1 && grid_coord_max.y > gridCoord.y+1));
}

void main()
{
    if (gl_GlobalInvocationID.x < gridSize.x && gl_GlobalInvocationID.y < gridSize.y && gl_GlobalInvocationID.z < gridSize.z)
    {
        uint lightCount  = uint(pointLights[0].position.w);
        uvec3 gridCoord = uvec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
        uint gridIndex = gridCoordToIndex(gridCoord);

        uint visibleLightCount = 0;
        uint visibleLightIndices[maxLightsPerCluster];
        for(uint i=0; i<lightCount; ++i)
        {
            if (!testLight(i, gridCoord))
                continue;
            uint visibleIndex = min(visibleLightCount++,maxLightsPerCluster-1);
            visibleLightIndices[visibleIndex] = i;
        }

        uint offset = atomicAdd(indexCount, visibleLightCount);
        for(uint i=0; i<visibleLightCount; ++i)
            lightIndexList[offset+i] = visibleLightIndices[i];

        lightGrid[gridIndex].offset = offset;
        lightGrid[gridIndex].count = visibleLightCount;
    }
}
